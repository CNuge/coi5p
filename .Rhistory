####
#' @rdname indel_check
#' @export
indel_check.coi5p = function(x, ..., indel_threshold = -346.95 ){
x$data$aaBin = individual_AAbin(x$aaSeq)
x$data$aaPHMMout = aphid::Viterbi(aa_PHMM, x$data$aaBin, odds = FALSE)
x$aaScore = x$data$aaPHMMout[['score']] #have this print a threshold
if(x$aaScore > indel_threshold){
x$indel_likely = FALSE
}else{
x$indel_likely = TRUE
}
if(grepl('\\*', x$aaSeq)){
x$stop_codons = TRUE
}else{
x$stop_codons = FALSE
}
return(x)
}
sequence = 'ctttacctgatttttggtgcatgagcaggtatagttggaacagccctaagtctcctaattcgagctgaacttgggcaacctggatcacttttaggagatgatcagatttataatgtaatcgtaaccgcccacgcttttgtaataatctttttcatggttataccaattataattggtggtttcggaaattgattagttcctttaataattggagcgccagatatagccttcccacgaataaataacataagtttctgacttcttccaccatcatttcttcttctcctcgcctctgctggagtagaagctggagcaggtactggttgaacagtttatcctccattagctagcaatctagcacatgctggaccatctgttgatttagctattttttctcttcacttagccggtgtttcatcaattttagcttcaattaattttatcacaaccattattaatataaaaccaccagctatttcccaatatcaaacaccattatttgtttgatctattcttgtaaccactattcttcttctcctctcacttccagttcttgcagcaggaattacaatattacttacagatcgtaaccttaatactacattctttgaccctgcaggtggaggagacccaatcctttatcaacattta'
dat = frame(dat)
dat = coi5p(sequence, name = seqname)
sequence = 'ctttacctgatttttggtgcatgagcaggtatagttggaacagccctaagtctcctaattcgagctgaacttgggcaacctggatcacttttaggagatgatcagatttataatgtaatcgtaaccgcccacgcttttgtaataatctttttcatggttataccaattataattggtggtttcggaaattgattagttcctttaataattggagcgccagatatagccttcccacgaataaataacataagtttctgacttcttccaccatcatttcttcttctcctcgcctctgctggagtagaagctggagcaggtactggttgaacagtttatcctccattagctagcaatctagcacatgctggaccatctgttgatttagctattttttctcttcacttagccggtgtttcatcaattttagcttcaattaattttatcacaaccattattaatataaaaccaccagctatttcccaatatcaaacaccattatttgtttgatctattcttgtaaccactattcttcttctcctctcacttccagttcttgcagcaggaattacaatattacttacagatcgtaaccttaatactacattctttgaccctgcaggtggaggagacccaatcctttatcaacattta'
dat = coi5p(sequence)
translate(dat)
dat = translate(dat)
dat$data$aaSeq
dat$framed
isnull(dat$framed)
is.null(dat$framed)
dat = coi5p()
is.null( character())
character() == character()
type() character())
length(character())
#' Build a new coi5p class instance.
#'
#' @keywords internal
new_coi5p = function(x = character(), name = character()){
stopifnot(is.character(x))
stopifnot(is.character(name))
if(length(x) == 0){
stop("Must pass a DNA sequence")
}
structure(list(name = name, raw = tolower(x)) , class = "coi5p")
}
#' Validate the new coi5p class instance.
#'
#' @keywords internal
validate_coi5p = function(new_instance){
# take a new instance and run validation checks on the sequence
# make sure the sequence has only ATGCN-
# make sure the sequence has length greater than zero
allowed = c("-", "a", "c", "g", "n","t")
for(c in sort(unique(strsplit(new_instance$raw, "")[[1]]))){
if(!c %in% allowed){
stop(paste("Unallowed character in DNA string:", c,
"\n Valid characters are: a t g c - n"))
}
}
if(new_instance$raw != tolower(new_instance$raw)){
stop("Unable to convert DNA string to lower case")
}
new_instance
}
#' @return an object of class code{"coi5p"}
#' @examples
#' dat = coi5p(example_nt_string)
#' #named coi5p sequence
#' dat = coi5p(example_nt_string, name = "example_seq1")
#' #components in output coi5p object:
#' dat$raw
#' dat$name
#' @name coi5p
#' @export
coi5p = function(x = character(), name = character()){
#if vector, paste them together
validate_coi5p(new_coi5p(tolower(x), name))
}
dat = coi5p()
# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'
#use: package::function() syntax for external functions so as to make it explicicit that that is needed
# This is how to document in a way that can be accessed by ?coi
# Add roxygen comments to your .R files.
# Run devtools::document() (or press Ctrl/Cmd + Shift + D in RStudio) to convert roxygen comments to .Rd files. (devtools::document() calls roxygen2::roxygenise() to do the hard work.)
# Preview documentation with ?.
# Rinse and repeat until the documentation looks the way you want.
# It will generate a man/foo.Rd file, which should not be modified by hand
# There is shorthand for arguments, examples etc. see the book, most common for functions: @@param @@examples @@return
# Generating the namespace with roxygen2 is just like generating function documentation with roxygen2.
# You use roxygen2 blocks (starting with #') and tags (starting with @).
#  The workflow is the same:
#   Add roxygen comments to your .R files.
#   Run devtools::document() (or press Ctrl/Cmd + Shift + D in RStudio) to convert roxygen comments to .Rd files.
#   Look at NAMESPACE and run tests to check that the specification is correct.
#   Rinse and repeat until the correct functions are exported.
###############################
# TODO section
# TODO - make sure only the user facing functions are exported
# TODO - need to run devtools::document() to generate documentation prior to passing the compile tests
# TODO - take the positions where functions from other libraries are used, use them in the tidyverse::func() style
# TODO - to check package run devtools::check() or hit ctrl-shift-E in rstudio
#       this along with the build pane in the top right will help you id the package problems, it
#       runs the tests and complies the components s/a the markdown vignettes
#       Travis-CI interfaces with this as well, so set that up!
#       Outputs are save to bin/coi5p.Rcheck where you can easily dig through the log files to find the errors
# TODO - add checks to make sure data structures required have been initialized
# if not then return a warning saying that the previous method needs to be run first
########################
# coi5p - Initialization of the class
#' Build a new coi5p class instance.
#'
#' @keywords internal
new_coi5p = function(x = character(), name = character()){
stopifnot(is.character(x))
stopifnot(is.character(name))
if(length(x) == 0){
stop("Must pass a DNA sequence.")
}
structure(list(name = name, raw = tolower(x)) , class = "coi5p")
}
#' Validate the new coi5p class instance.
#'
#' @keywords internal
validate_coi5p = function(new_instance){
# take a new instance and run validation checks on the sequence
# make sure the sequence has only ATGCN-
# make sure the sequence has length greater than zero
allowed = c("-", "a", "c", "g", "n","t")
for(c in sort(unique(strsplit(new_instance$raw, "")[[1]]))){
if(!c %in% allowed){
stop(paste("Unallowed character in DNA string:", c,
"\n Valid characters are: a t g c - n"))
}
}
if(new_instance$raw != tolower(new_instance$raw)){
stop("Unable to convert DNA string to lower case")
}
new_instance
}
#' Build a coi5p object from a DNA sequence string.
#'
#' @param x a nucleotide string.
#' Valid characters within the nucleotide string are: a,t,g,c,-,n.
#' The nucleotide string can be input as upper case, but will be automatically converted to lower case.
#' @param name an optional character string. Identifier for the sequence.
#'
#' @return an object of class code{"coi5p"}
#' @examples
#' dat = coi5p(example_nt_string)
#' #named coi5p sequence
#' dat = coi5p(example_nt_string, name = "example_seq1")
#' #components in output coi5p object:
#' dat$raw
#' dat$name
#' @name coi5p
#' @export
coi5p = function(x = character(), name = character()){
#if vector, paste them together
validate_coi5p(new_coi5p(tolower(x), name))
}
###########################
# coi5p - Generics and methods
#' Take a coi5p sequence and place it in reading frame.
#'
#' @param x a coi5p class object
#' @param ... additional arguments to be passed between methods.
#'
#' @return an object of class code{"coi5p"}
#' @seealso \code{\link{coi5p}}
#' @examples
#' #previously run function:
#' dat = coi5p(example_nt_string )
#'
#' dat = frame(dat)
#'
#' #additional components in output coi5p object:
#' dat$framed
#' @export
#' @name frame
frame = function(x, ...){
UseMethod("frame")
}
####
#' @rdname frame
#' @export
frame.coi5p = function(x, ... ){
#input is the output structure from coi
#set the reading frame and store the framed string in $framed
x$data$ntBin = individual_DNAbin(x$raw)
x$data$ntPHMMout = aphid::Viterbi(nt_PHMM, x$data$ntBin, odds = FALSE)
if(leading_ins(x$data$ntPHMMout[['path']])){
trim_temp  = set_frame(x$raw, x$data$ntPHMMout[['path']])
x$data$ntBin = individual_DNAbin(trim_temp)
x$data$ntPHMMout = aphid::Viterbi(nt_PHMM, x$data$ntBin, odds = FALSE)
}else{
trim_temp = x$raw
}
x$framed = set_frame(trim_temp, x$data$ntPHMMout[['path']])
return(x)
}
#' Translate a coi5p sequence.
#'
#' @param x a coi5p class object for which frame() has been run.
#' @param ... additional arguments to be passed between methods.
#' @param trans_table The translation table to use for translating from nucleotides to amino acids.
#' Default is 0, which indicates that censored translation should be performed. If the taxonomy
#' of the sample is known, use the function which_trans_table() to determine the translation table to use.
#' @param frame_offset The offset to the reading frame to be applied for translation. By default the offset
#' is zero, so the first character in the framed sequence is considered the first nucelotide of the first codon.
#' Passing frame_offset = 1 would make the second character in the framed sequence the the first nucelotide of
#' the first codon.
#'
#'
#' @return an object of class code{"coi5p"}
#' @seealso \code{\link{coi5p}}
#' @seealso \code{\link{frame}}
#' @seealso \code{\link{which_trans_table}}
#' @examples
#' #previously run functions:
#' dat = coi5p(example_nt_string )
#' dat = frame(dat)
#' #translate when the translation table is not known:
#' dat = translate(dat)
#' #translate when the translation table is known:
#' dat = translate(dat, trans_table = 5)
#' #additional components in output coi5p object:
#' dat$aaSeq
#'@name translate
translate = function(x, ...){
UseMethod("translate")
}
####
#' @rdname translate
#' @export
translate.coi5p = function(x, ..., trans_table = 0, frame_offset = 0){
if(is.null(x$framed)){
stop("translate function accepts framed coi5p objects. See function: frame.")
}
if(trans_table == 0){
x$aaSeq = censored_translation(x$framed, reading_frame = (frame_offset+1))
}else{
#split the DNA string into a vector, all characters to lower case
dna_list = strsplit(gsub('-', 'n', as.character(tolower(x$framed))),"")
dna_vec = dna_list[[1]]
#translate using the designated numcode, returns a vector of AAs
aa_vec = seqinr::translate(dna_vec, frame = frame_offset, numcode=trans_table, ambiguous= TRUE, NAstring = '-')
x$aaSeq = paste(aa_vec, collapse= "")
}
return(x)
}
#' Check is coi5p sequence likely contains an indel error.
#'
#'
#' @param x a coi5p class object for which frame() and translate() have been run.
#' @param indel_threshold the log likelihood threshold used to assess whether or not sequences
#' @param ... additional arguments to be passed between methods.
#' are likely to contain an indel. Default is -345.95. Values lower than this will be classified
#' as likely to contain an indel and values higer will be classified as not likely to contain an indel.
#'
#' @return an object of class code{"coi5p"}
#' @seealso \code{\link{coi5p}}
#' @seealso \code{\link{frame}}
#' @seealso \code{\link{translate}}
#' @examples
#' #previously run functions:
#' dat = coi5p(example_nt_string)
#' dat = frame(dat)
#' dat = translate(dat)
#' #current function
#' dat = indel_check(dat)
#' #with custom indel threshold
#' dat = indel_check(dat, indel_threshold = -400)
#' #additional components in output coi5p object:
#' dat$stop_codons #Boolean - Indicates if there are stop codons in the amino acid sequence.
#' dat$indel_likely #Boolean - Indicates if there is likely a insertion or deletion in the sequence.
#' dat$aaScore #view the amino acid log likelihood score
#' @name indel_check
indel_check = function(x, ...){
UseMethod("indel_check")
}
####
#' @rdname indel_check
#' @export
indel_check.coi5p = function(x, ..., indel_threshold = -346.95 ){
if(is.null(x$framed)|is.null(x$aaSeq) ){
stop("indel_check function accepts framed and translated coi5p objects. See functions: frame, translate.")
}
x$data$aaBin = individual_AAbin(x$aaSeq)
x$data$aaPHMMout = aphid::Viterbi(aa_PHMM, x$data$aaBin, odds = FALSE)
x$aaScore = x$data$aaPHMMout[['score']] #have this print a threshold
if(x$aaScore > indel_threshold){
x$indel_likely = FALSE
}else{
x$indel_likely = TRUE
}
if(grepl('\\*', x$aaSeq)){
x$stop_codons = TRUE
}else{
x$stop_codons = FALSE
}
return(x)
}
sequence = 'ctttacctgatttttggtgcatgagcaggtatagttggaacagccctaagtctcctaattcgagctgaacttgggcaacctggatcacttttaggagatgatcagatttataatgtaatcgtaaccgcccacgcttttgtaataatctttttcatggttataccaattataattggtggtttcggaaattgattagttcctttaataattggagcgccagatatagccttcccacgaataaataacataagtttctgacttcttccaccatcatttcttcttctcctcgcctctgctggagtagaagctggagcaggtactggttgaacagtttatcctccattagctagcaatctagcacatgctggaccatctgttgatttagctattttttctcttcacttagccggtgtttcatcaattttagcttcaattaattttatcacaaccattattaatataaaaccaccagctatttcccaatatcaaacaccattatttgtttgatctattcttgtaaccactattcttcttctcctctcacttccagttcttgcagcaggaattacaatattacttacagatcgtaaccttaatactacattctttgaccctgcaggtggaggagacccaatcctttatcaacattta'
coi5p()
dat = coi5p(sequence)
translate(dat)
indel_check(dat)
devtools::document()
devtools::document()
devtools::check()
devtools::document()
library(coi5p)
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
example_nt_string
output = coi5p_pipe(example_nt_string)
output
#see the avaliable components
names(output)
#retrieve only the amino acid sequence from the object
output$aaSeq
ex_table_to_use = which_trans_table("Scyliorhinidae")
ex_table_to_use
output = coi5p_pipe(example_nt_string, trans_table = ex_table_to_use)
output
#build the coi5p object
dat = coi5p(example_nt_string, name="example_sequence_1")
#frame the sequence
dat = frame(dat)
#since we determined the genetic code above, we can use
#the proper transaltion table as opposed to conducting
#the default censored translation
dat = translate(dat, trans_table = 2)
#check to see if an insertion or deletion is likely
dat = indel_check(dat)
dat
#this is the example data
dim(example_barcode_data)
example_barcode_data
ex_test = example_barcode_data$sequence[3]
nchar(ex_test)
ex_test
for(i in 1:length(example_barcode_data$id)){
if(is.na(example_barcode_data$genetic_code[[i]])){
example_barcode_data[i, "genetic_code"] = which_trans_table(example_barcode_data$taxa[[i]])
}
}
?load
example_barcode_data
example_barcode_data$taxa
load('data/example_barcode_data.RData', stringsAsFactors=FALSE)
as.tibble(example_barcode_data)
library(tidyverse)
example_barcode_data = as.tibble(example_barcode_data)
example_barcode_data = as_tibble(example_barcode_data)
example_barcode_data
load('data/example_barcode_data.RData' )
View(example_barcode_data)
# save(example_barcode_data, file = 'data/example_barcode_data.RData')
# load('data/example_barcode_data.RData' )
for(i in names(example_barcode_data)){
example_barcode_data[[i]] = as.character(example_barcode_data[[i]])
}
example_barcode_data$taxa
names(example_barcode_data)
example_barcode_data[["genetic_code"]] = as.integer(example_barcode_data[["genetic_code"]])
save(example_barcode_data, file = 'data/example_barcode_data.RData')
load('data/example_barcode_data.RData' )
example_barcode_data$taxa
save(example_barcode_data, file = 'data/example_barcode_data.RData')
devtools::document()
Ctrl + Shift + E
library(coi5p)
library(coi5p)
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
example_nt_string
output = coi5p_pipe(example_nt_string)
output
ex_table_to_use = which_trans_table("Scyliorhinidae")
ex_table_to_use
output = coi5p_pipe(example_nt_string, trans_table = ex_table_to_use)
output
#this is the example data
dim(example_barcode_data)
example_barcode_data
for(i in 1:length(example_barcode_data$id)){
if(is.na(example_barcode_data$genetic_code[[i]])){
example_barcode_data[i, "genetic_code"] = which_trans_table(example_barcode_data$taxa[[i]])
}
}
example_barcode_data
example_barcode_data
shortproblem = example_barcode_data$sequence[3]
shortproblem
roblem = example_barcode_data$sequence[3]
table_ex = 5
output = coi5p_pipe(shortproblem, tra
shortproblem = example_barcode_data$sequence[3]
shortproblem = example_barcode_data$sequence[3]
table_ex = 5
output = coi5p_pipe(shortproblem, trans_table = table_ex)
output
example_barcode_data$notes[3]
substr(shortproblem, 5 )
nchar(shortproblem)
substr(shortproblem, 5 , nchar(shortproblem))
shorter_version = substr(shortproblem, 5 , nchar(shortproblem))
shorter_version
output2 = coi5p_pipe(shorter_version, trans_table = table_ex)
output2
example_barcode_data$notes[3]
example_barcode_data$sequence[3] = shorter_version
example_barcode_data$notes[3] = "21_leading_missing_7_trailing_missing"
example_barcode_data
shorter_version
example_barcode_data
save(example_barcode_data, file = 'data/example_barcode_data.RData')
load('data/example_barcode_data.RData' )
example_barcode_data
Ctrl + Shift + E
library(coi5p)
library(coi5p)
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
example_nt_string
output = coi5p_pipe(example_nt_string)
output
#see the avaliable components
names(output)
#retrieve only the amino acid sequence from the object
output$aaSeq
ex_table_to_use = which_trans_table("Scyliorhinidae")
ex_table_to_use
output = coi5p_pipe(example_nt_string, trans_table = ex_table_to_use)
output
#build the coi5p object
dat = coi5p(example_nt_string, name="example_sequence_1")
#frame the sequence
dat = frame(dat)
#since we determined the genetic code above, we can use
#the proper transaltion table as opposed to conducting
#the default censored translation
dat = translate(dat, trans_table = 2)
#check to see if an insertion or deletion is likely
dat = indel_check(dat)
dat
#this is the example data
dim(example_barcode_data)
example_barcode_data
example_barcode_data$coi_output = lapply(1:length(example_barcode_data$id), function(i){
coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
})
example_barcode_data$coi_output[[1]]
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[4]]) < nchar(example_barcode_data$sequence[[4]])
example_barcode_data
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[4]])
nchar(example_barcode_data$sequence[[4]])
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]])
nchar(example_barcode_data$sequence[[5]])
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]]) < nchar(example_barcode_data$sequence[[5]])
#extract only a single column
flatten_coi5p(example_barcode_data$coi_output, keep_cols = 'aaSeq')
#extract multiple columns
flatten_coi5p(example_barcode_data$coi_output, keep_cols = c('framed','aaSeq'))
#extract all columns
full_coi5p_df = flatten_coi5p(example_barcode_data$coi_output)
full_coi5p_df
which_trans_table("Scyliorhinidae")
library(coi5p)
?coi5p
example_nt_string
library(coi5p)
example_barcode_data
?coi5p_pipe
sequence = 'aaccgctgattattttcaaccaaccacaaagatatcggcaaactttatattttatttttggagcttgagctggaatagttggaacatctttaagaattttaattcgagctgaattaggacatcctggagcattaattggagatgatcaaatttataatgtaattgtaactgcacatgcttttattataattttttttatggttatacctattataattggtggatttggaaattgattagtgcctttaatattaggtgctcctgatatagcattcccacgaataaataatataagattttgactactacctcctgctctttctttactattagtaagtagaatagttgaaaatggagctggaacaggatgaactgtttatccacctttatccgctggaattgctcatggtggagcttcagttgatttagctattttttctctacatttagcagggatttcttcaattttaggagctctaaattttattacaactgtaattaatatacgatcaacaggaatttcattagatcgtatacctttatttgtttgatcagtagttattactgctttattattgttattatcacttccagtactagcaggagctattactatattattaacagatcgaaatttaaatacatcattttttgacccagcgggaggaggagatcctattttatatcaacatttattatttattta'
sequence_framed = '-ctttatattttatttttggagcttgagctggaatagttggaacatctttaagaattttaattcgagctgaattaggacatcctggagcattaattggagatgatcaaatttataatgtaattgtaactgcacatgcttttattataattttttttatggttatacctattataattggtggatttggaaattgattagtgcctttaatattaggtgctcctgatatagcattcccacgaataaataatataagattttgactactacctcctgctctttctttactattagtaagtagaatagttgaaaatggagctggaacaggatgaactgtttatccacctttatccgctggaattgctcatggtggagcttcagttgatttagctattttttctctacatttagcagggatttcttcaattttaggagctctaaattttattacaactgtaattaatatacgatcaacaggaatttcattagatcgtatacctttatttgtttgatcagtagttattactgctttattattgttattatcacttccagtactagcaggagctattactatattattaacagatcgaaatttaaatacatcattttttgacccagcgggaggaggagatcctattttatatcaacattta'
sequence_AAcensored = "-LYFIFGAWAG?VGTSL?ILIRAELGHPGALIGDDQIYNVIVTAHAFI?IFFMV?PI?IGGFGNWLVPL?LGAPD?AFPR?NN??FWLLPPALSLLLVS??VENGAGTGWTVYPPLSAGIAHGGASVDLAIFSLHLAGISSILGALNFITTVIN?RSTGISLDR?PLFVWSVVITALLLLLSLPVLAGAIT?LLTDRNLNTSFFDPAGGGDPILYQHL"
sequence_AA5 = "-LYFIFGAWAGMVGTSLSILIRAELGHPGALIGDDQIYNVIVTAHAFIMIFFMVMPIMIGGFGNWLVPLMLGAPDMAFPRMNNMSFWLLPPALSLLLVSSMVENGAGTGWTVYPPLSAGIAHGGASVDLAIFSLHLAGISSILGALNFITTVINMRSTGISLDRMPLFVWSVVITALLLLLSLPVLAGAITMLLTDRNLNTSFFDPAGGGDPILYQHL"
dat = coi5p(sequence )
dat = frame(dat)
dat
dat = translate(dat)
dat
