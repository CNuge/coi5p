example_barcode_data[i, "genetic_code"] = which_trans_table(example_barcode_data$taxa[[i]])
}
}
example_barcode_data
example_barcode_data
shortproblem = example_barcode_data$sequence[3]
shortproblem
roblem = example_barcode_data$sequence[3]
table_ex = 5
output = coi5p_pipe(shortproblem, tra
shortproblem = example_barcode_data$sequence[3]
shortproblem = example_barcode_data$sequence[3]
table_ex = 5
output = coi5p_pipe(shortproblem, trans_table = table_ex)
output
example_barcode_data$notes[3]
substr(shortproblem, 5 )
nchar(shortproblem)
substr(shortproblem, 5 , nchar(shortproblem))
shorter_version = substr(shortproblem, 5 , nchar(shortproblem))
shorter_version
output2 = coi5p_pipe(shorter_version, trans_table = table_ex)
output2
example_barcode_data$notes[3]
example_barcode_data$sequence[3] = shorter_version
example_barcode_data$notes[3] = "21_leading_missing_7_trailing_missing"
example_barcode_data
shorter_version
example_barcode_data
save(example_barcode_data, file = 'data/example_barcode_data.RData')
load('data/example_barcode_data.RData' )
example_barcode_data
Ctrl + Shift + E
library(coi5p)
library(coi5p)
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
example_nt_string
output = coi5p_pipe(example_nt_string)
output
#see the avaliable components
names(output)
#retrieve only the amino acid sequence from the object
output$aaSeq
ex_table_to_use = which_trans_table("Scyliorhinidae")
ex_table_to_use
output = coi5p_pipe(example_nt_string, trans_table = ex_table_to_use)
output
#build the coi5p object
dat = coi5p(example_nt_string, name="example_sequence_1")
#frame the sequence
dat = frame(dat)
#since we determined the genetic code above, we can use
#the proper transaltion table as opposed to conducting
#the default censored translation
dat = translate(dat, trans_table = 2)
#check to see if an insertion or deletion is likely
dat = indel_check(dat)
dat
#this is the example data
dim(example_barcode_data)
example_barcode_data
example_barcode_data$coi_output = lapply(1:length(example_barcode_data$id), function(i){
coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
})
example_barcode_data$coi_output[[1]]
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[4]]) < nchar(example_barcode_data$sequence[[4]])
example_barcode_data
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[4]])
nchar(example_barcode_data$sequence[[4]])
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]])
nchar(example_barcode_data$sequence[[5]])
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]]) < nchar(example_barcode_data$sequence[[5]])
#extract only a single column
flatten_coi5p(example_barcode_data$coi_output, keep_cols = 'aaSeq')
#extract multiple columns
flatten_coi5p(example_barcode_data$coi_output, keep_cols = c('framed','aaSeq'))
#extract all columns
full_coi5p_df = flatten_coi5p(example_barcode_data$coi_output)
full_coi5p_df
which_trans_table("Scyliorhinidae")
library(coi5p)
?coi5p
example_nt_string
library(coi5p)
example_barcode_data
?coi5p_pipe
sequence = 'aaccgctgattattttcaaccaaccacaaagatatcggcaaactttatattttatttttggagcttgagctggaatagttggaacatctttaagaattttaattcgagctgaattaggacatcctggagcattaattggagatgatcaaatttataatgtaattgtaactgcacatgcttttattataattttttttatggttatacctattataattggtggatttggaaattgattagtgcctttaatattaggtgctcctgatatagcattcccacgaataaataatataagattttgactactacctcctgctctttctttactattagtaagtagaatagttgaaaatggagctggaacaggatgaactgtttatccacctttatccgctggaattgctcatggtggagcttcagttgatttagctattttttctctacatttagcagggatttcttcaattttaggagctctaaattttattacaactgtaattaatatacgatcaacaggaatttcattagatcgtatacctttatttgtttgatcagtagttattactgctttattattgttattatcacttccagtactagcaggagctattactatattattaacagatcgaaatttaaatacatcattttttgacccagcgggaggaggagatcctattttatatcaacatttattatttattta'
sequence_framed = '-ctttatattttatttttggagcttgagctggaatagttggaacatctttaagaattttaattcgagctgaattaggacatcctggagcattaattggagatgatcaaatttataatgtaattgtaactgcacatgcttttattataattttttttatggttatacctattataattggtggatttggaaattgattagtgcctttaatattaggtgctcctgatatagcattcccacgaataaataatataagattttgactactacctcctgctctttctttactattagtaagtagaatagttgaaaatggagctggaacaggatgaactgtttatccacctttatccgctggaattgctcatggtggagcttcagttgatttagctattttttctctacatttagcagggatttcttcaattttaggagctctaaattttattacaactgtaattaatatacgatcaacaggaatttcattagatcgtatacctttatttgtttgatcagtagttattactgctttattattgttattatcacttccagtactagcaggagctattactatattattaacagatcgaaatttaaatacatcattttttgacccagcgggaggaggagatcctattttatatcaacattta'
sequence_AAcensored = "-LYFIFGAWAG?VGTSL?ILIRAELGHPGALIGDDQIYNVIVTAHAFI?IFFMV?PI?IGGFGNWLVPL?LGAPD?AFPR?NN??FWLLPPALSLLLVS??VENGAGTGWTVYPPLSAGIAHGGASVDLAIFSLHLAGISSILGALNFITTVIN?RSTGISLDR?PLFVWSVVITALLLLLSLPVLAGAIT?LLTDRNLNTSFFDPAGGGDPILYQHL"
sequence_AA5 = "-LYFIFGAWAGMVGTSLSILIRAELGHPGALIGDDQIYNVIVTAHAFIMIFFMVMPIMIGGFGNWLVPLMLGAPDMAFPRMNNMSFWLLPPALSLLLVSSMVENGAGTGWTVYPPLSAGIAHGGASVDLAIFSLHLAGISSILGALNFITTVINMRSTGISLDRMPLFVWSVVITALLLLLSLPVLAGAITMLLTDRNLNTSFFDPAGGGDPILYQHL"
dat = coi5p(sequence )
dat = frame(dat)
dat
dat = translate(dat)
dat
library(coi5p)
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
example_nt_string
output = coi5p_pipe(example_nt_string)
output
#see the avaliable components
names(output)
#retrieve only the amino acid sequence from the object
output$aaSeq
ex_table_to_use = which_trans_table("Scyliorhinidae")
ex_table_to_use
output = coi5p_pipe(example_nt_string, trans_table = ex_table_to_use)
output
#build the coi5p object
dat = coi5p(example_nt_string, name="example_sequence_1")
#frame the sequence
dat = frame(dat)
#since we determined the genetic code above, we can use
#the proper transaltion table as opposed to conducting
#the default censored translation
dat = translate(dat, trans_table = 2)
#check to see if an insertion or deletion is likely
dat = indel_check(dat)
dat
#this is the example data
dim(example_barcode_data)
example_barcode_data
example_barcode_data$coi_output = lapply(1:length(example_barcode_data$id), function(i){
coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
})
example_barcode_data$coi_output[[1]] #example of the first output
example_barcode_data$coi_output = coi5p_pipe(example_barcode_data$sequence,
name = example_barcode_data$id,
trans_table = example_barcode_data$genetic_code)
example_barcode_data$coi_output = coi5p(example_barcode_data$sequence,
name = example_barcode_data$id)
example_barcode_data$coi_output = coi5p(example_barcode_data$sequence,
name = example_barcode_data$id)
example_barcode_data$coi_output = coi5p(example_barcode_data$sequence,
name = example_barcode_data$id)
example_barcode_data$sequence
example_barcode_data$coi_output = coi5p(example_barcode_data$sequence,
)
x = '----------ATGASTAGATAGTATGGGACXCCACACCT---------------------'
y = x
x = list(raw=y)
x$raw
substr(x$raw,1, 25)
nchar(substr(x$raw,1, 25))
substr(x$raw,(length(x$raw)-25),length(x$raw))
x$raw
substr(x$raw,(nchar(x$raw)-25), nchar(x$raw))
nchar( substr(x$raw,(nchar(x$raw)-25), nchar(x$raw)))
library(coi5p)
library(coi5p)
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
example_nt_string
output = coi5p_pipe(example_nt_string)
output
library(coi5p)
library(coi5p)
load('R/sysdata.rda')
plot(nt_PHMM, from="start", to = 6)
nt_PHMM
plot(nt_PHMM , from=0, to = 5)
plot(aa_PHMM , from=0, to = 5)
plot(nt_PHMM, from="start", to = 6, just= 'left')
plot(x = nt_PHMM, from="start", to = 6, just= 'left')
nt_PHMM
plot.PHMM(x = nt_PHMM, from="start", to = 6, just= 'left')
library(aphid)
plot.PHMM(x = nt_PHMM, from="start", to = 6, just= 'left')
plot.PHMM(x = nt_PHMM, from="start", to = 10, just= 'left')
plot.PHMM(x = nt_PHMM, from=647, to = 657, just= 'right')
plot.PHMM(x = nt_PHMM, from="start", to = 10, just= 'left')
plot.PHMM(x = aa_PHMM, from="start", to = 5, just= 'left')
plot.PHMM(x = aa_PHMM, from=214, to = 219, just= 'right')
plot.PHMM(x = aa_PHMM, from=215, to = 219, just= 'right')
plot.PHMM(x = aa_PHMM, from=215, to = 219)
plot.PHMM(x = nt_PHMM, from=648, to = 657, just= 'right')
plot.PHMM(x = nt_PHMM, from="start", to = 10, just= 'left')
library(coi5p)
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
example_nt_string
output = coi5p_pipe(example_nt_string)
output
#see the avaliable components
names(output)
#retrieve only the amino acid sequence from the object
output$aaSeq
ex_table_to_use = which_trans_table("Scyliorhinidae")
ex_table_to_use
output = coi5p_pipe(example_nt_string, trans_table = ex_table_to_use)
output
#build the coi5p object
dat = coi5p(example_nt_string, name="example_sequence_1")
#frame the sequence
dat = frame(dat)
#since we determined the genetic code above, we can use
#the proper transaltion table as opposed to conducting
#the default censored translation
dat = translate(dat, trans_table = 2)
#check to see if an insertion or deletion is likely
dat = indel_check(dat)
dat
#this is the example data
dim(example_barcode_data)
example_barcode_data
example_barcode_data$coi_output = lapply(1:length(example_barcode_data$id), function(i){
coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
})
example_barcode_data$coi_output[[1]] #example of the first output
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]]) < nchar(example_barcode_data$sequence[[5]])
#extract only a single column
flatten_coi5p(example_barcode_data$coi_output, keep_cols = 'aaSeq')
#extract multiple columns
flatten_coi5p(example_barcode_data$coi_output, keep_cols = c('framed','aaSeq'))
#extract all columns
full_coi5p_df = flatten_coi5p(example_barcode_data$coi_output)
full_coi5p_df
full_coi5p_df = data.frame(matrix(ncol = 7, nrow = 0),stringsAsFactors = FALSE )
colnames(full_coi5p_df) = c("name", "raw", "framed", "aaSeq", "aaScore", "indel_likely", "stop_codons")
for(i in 1:length(example_barcode_data$id)){
print(paste("On sequence number:", i))
out_data = coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
full_coi5p_df = rbind(full_coi5p_df, flatten_coi5p(list(out_data)))
}
library(seqinr)
# example fasta file included with coi5p
# included in the header line:
# the name of the sample, its genetic code, taxonomic designation and some notes
ex_fasta_file = system.file("extdata/example_barcode_data.fasta", package = "coi5p")
#read in the example fasta file using seqinr
ex_data = seqinr::read.fasta(ex_fasta_file, as.string = TRUE)
#here is what the output from read.fasta looks like
head(ex_data)
#parse the data in the header line by splitting the name on the | character
parsed_names_data = lapply(1:length(ex_data), function(i){
unlist(strsplit(names(ex_data)[[i]],"\\|"))
})
# subset the components of the header line and build these and the sequence
# into a dataframe matching the style used in the coi5p batch example
example_barcode_data_from_scratch = data.frame(
id = sapply(parsed_names_data, function(x) x[[1]]),
genetic_code = sapply(parsed_names_data, function(x) x[[2]]),
taxa = sapply(parsed_names_data, function(x) x[[3]]),
sequence = unname(unlist(ex_data)),
notes = sapply(parsed_names_data, function(x) x[[4]])
)
head(example_barcode_data_from_scratch)
libary(coi5p)
library(coi5p)
load('data/example_barcode_data.RData' )
trans_df = load('data/trans_df.RData')
load('R/sysdata.rda')
trans_df
head(trans_df)
trans_df$trans_table[trans_df$taxon == 'Pyuridae']
trans_df$trans_table[trans_df$taxon == 'Pyuridae'] = 13
trans_df$trans_table[trans_df$taxon == 'Pyuridae']
trans_df$taxon ==	'Stolidobranchia'
trans_df$trans_table[trans_df$taxon ==	'Stolidobranchia']
trans_df$trans_table
trans_df$trans_table[trans_df$taxon ==	'Stolidobranchia'] = 0
trans_df$trans_table == 0
trans_df$trans_table[trans_df$trans_table == 0]
trans_df$trans_table[trans_df$taxon ==	'	Ascidiacea']
trans_df$trans_table[trans_df$taxon ==	'Ascidiacea']
trans_df$trans_table[trans_df$taxon ==	'Ascidiacea']
trans_df$taxon ==	'Ascidiacea'
trans_df$trans_table[trans_df$taxon ==	'Ascidiacea']
###############################################################################
#' Data frame containing the translation table recommendation.
#'
"trans_df"
head(trans_df)
trans_df$level == "class"
trans_df$level[trans_df$level == "class"]
View(trans_df)
head(trans_df)
# should this be in it?:
# trans_df$trans_table[trans_df$taxon ==	'Ascidiacea'] = 0
asc = data.frame(trans_table = 0, taxon = "Ascidiacea", level = "class")
trans_df = rbind(trans_df, asc)
trans_df$trans_table[trans_df$taxon ==	'Ascidiacea']
use_data(nt_PHMM , aa_PHMM, trans_df, example_nt_string, overwrite = TRUE, internal = TRUE)
library(devtools)
use_data(nt_PHMM , aa_PHMM, trans_df, example_nt_string, overwrite = TRUE, internal = TRUE)
x = "ACMasas"
tolower(x)
trans_df$trans_table = tolower(trans_df$trans_table)
trans_df
trans_df$trans_table = unlist(lapply( trans_df$trans_table, tolower))
trans_df
trans_df$taxon = unlist(lapply( trans_df$taxon, tolower))
trans_df
trans_df$trans_table[1]
trans_df$trans_table = as.integer(trans_df$trans_table)
trans_df$trans_table[1]
use_data(nt_PHMM , aa_PHMM, trans_df, example_nt_string, overwrite = TRUE, internal = TRUE)
devtools::document()
library(coi5p)
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
example_nt_string
output = coi5p_pipe(example_nt_string)
output
#see the avaliable components
names(output)
#retrieve only the amino acid sequence from the object
output$aaSeq
#see the avaliable components
names(output)
#retrieve only the amino acid sequence from the object
output$aaSeq
ex_table_to_use = which_trans_table("Scyliorhinidae")
ex_table_to_use
output = coi5p_pipe(example_nt_string, trans_table = ex_table_to_use)
output
#build the coi5p object
dat = coi5p(example_nt_string, name="example_sequence_1")
#frame the sequence
dat = frame(dat)
#since we determined the genetic code above, we can use
#the proper transaltion table as opposed to conducting
#the default censored translation
dat = translate(dat, trans_table = 2)
#check to see if an insertion or deletion is likely
dat = indel_check(dat)
dat
#this is the example data
dim(example_barcode_data)
example_barcode_data
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]]) < nchar(example_barcode_data$sequence[[5]])
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]]) < nchar(example_barcode_data$sequence[[5]])
example_barcode_data$coi_output
example_barcode_data$framed
example_barcode_data$coi_output = lapply(1:length(example_barcode_data$id), function(i){
coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
})
example_barcode_data$coi_output[[1]] #example of the first output
example_barcode_data
example_barcode_data$coi_output[[1]]$framed
unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]]) < nchar(example_barcode_data$sequence[[5]])
example_barcode_data$coi_output = lapply(1:length(example_barcode_data$id), function(i){
coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
})
example_barcode_data$coi_output[[1]] #example of the first output
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]]) < nchar(example_barcode_data$sequence[[5]])
#extract only a single column
flatten_coi5p(example_barcode_data$coi_output, keep_cols = 'aaSeq')
#extract multiple columns
flatten_coi5p(example_barcode_data$coi_output, keep_cols = c('framed','aaSeq'))
#extract all columns
full_coi5p_df = flatten_coi5p(example_barcode_data$coi_output)
full_coi5p_df
full_coi5p_df = data.frame(matrix(ncol = 7, nrow = 0),stringsAsFactors = FALSE )
colnames(full_coi5p_df) = c("name", "raw", "framed", "aaSeq", "aaScore", "indel_likely", "stop_codons")
for(i in 1:length(example_barcode_data$id)){
print(paste("On sequence number:", i))
out_data = coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
full_coi5p_df = rbind(full_coi5p_df, flatten_coi5p(list(out_data)))
}
library(seqinr)
# example fasta file included with coi5p
# included in the header line:
# the name of the sample, its genetic code, taxonomic designation and some notes
ex_fasta_file = system.file("extdata/example_barcode_data.fasta", package = "coi5p")
#read in the example fasta file using seqinr
ex_data = seqinr::read.fasta(ex_fasta_file, as.string = TRUE)
#here is what the output from read.fasta looks like
head(ex_data)
#parse the data in the header line by splitting the name on the | character
parsed_names_data = lapply(1:length(ex_data), function(i){
unlist(strsplit(names(ex_data)[[i]],"\\|"))
})
# subset the components of the header line and build these and the sequence
# into a dataframe matching the style used in the coi5p batch example
example_barcode_data_from_scratch = data.frame(
id = sapply(parsed_names_data, function(x) x[[1]]),
genetic_code = sapply(parsed_names_data, function(x) x[[2]]),
taxa = sapply(parsed_names_data, function(x) x[[3]]),
sequence = unname(unlist(ex_data)),
notes = sapply(parsed_names_data, function(x) x[[4]])
)
head(example_barcode_data_from_scratch)
knit_with_parameters('~/bin/coi5p/vignettes/coi5p-vignette.Rmd')
?knit_with_parameters
?knitr::knit_with_parameters
library(knitr)
?knitr::knit_with_parameters
knit_with_parameters('~/bin/coi5p/vignettes/coi5p-vignette.Rmd')
?rmarkdown::::knit_with_parameters
?rmarkdown::knit_with_parameters
library(coi5p)
library(ape)
library(aphid)
library(seqinr)
source('R/deploy_PHMMs.r')
source('R/translation.r')
load('R/sysdata.rda')
trans_df
new_trans = read.csv('/home/cnuge/bin/DAPR/scripts/family_tanslation_table.tsv' , sep = '\t')
new_trans
View(new_trans)
View(new_trans)
View(trans_df)
View(trans_df)
new_trans$phylogeny = tolower(new_trans$phylogeny)
View(trans_df)
new_trans = read.csv('/home/cnuge/bin/DAPR/scripts/family_tanslation_table.tsv' , sep = '\t')
new_trans$phylogeny = tolower(new_trans$phylogeny)
new_trans
unique(new_trans$level) == unique(trans_df$level)
trans_df = new_trans
use_data(nt_PHMM , aa_PHMM, trans_df, example_nt_string, overwrite = TRUE, internal = TRUE)
library(devtools)
use_data(nt_PHMM , aa_PHMM, trans_df, example_nt_string, overwrite = TRUE, internal = TRUE)
devtools:document()
devtools::document()
library(coi5p)
View(trans_df)
which_trans_table("Chordata")
which_trans_table("Hydrobiidae")
trans_df
#' @param x a taxonomic designation (allowed ranks: family, order, class, phylum).
#' @return an integer indicating the correct translation table.
#' @examples
#' which_trans_table("Chordata") #phylum
#' which_trans_table("Actinopterygii") #class
#' which_trans_table("Akentrogonida")  #order
#' which_trans_table("Hydrobiidae") #family
#' @details
#' If which table is unable to identify a translation table to utilize, more information on translation tables can be found here: https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi
#' @export
which_trans_table = function(x) {
use_tab = trans_df$trans_table[trans_df$phylogeny == tolower(x)]
if(length(use_tab) == 0){
return(0)
}
return(use_tab)
}
which_trans_table("Chordata") #phylum
which_trans_table("Actinopterygii") #class
which_trans_table("Akentrogonida")  #order
which_trans_table("Hydrobiidae") #family
which_trans_table("Hydrobiidae") #family
which_trans_table("Vespidae")
which_trans_table("Entomobryidae")
library(coi5p)
library(devtools)
use_build_ignore(c(".travis.yml", "cran-comments.md"))
