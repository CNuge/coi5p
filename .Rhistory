sequence3_AAcensored = '----------------------------GALLGDDQIYNVIVTAHAFVMIFF?VMPI?IGGFGNWLIPL?IGAPDMAFPR?NN?SFWLLPPSFLLLLSSSGVEAGAGTGWTVYPPLAGNLAHAGASVDLTIFSLHLAGISSILGAINFITTIIN??PPAISQYQTPLFVWAVLVTAVLLLLSLPVLA'
sequence3_AA5 = '----------------------------GALLGDDQIYNVIVTAHAFVMIFFMVMPIMIGGFGNWLIPLMIGAPDMAFPRMNNMSFWLLPPSFLLLLSSSGVEAGAGTGWTVYPPLAGNLAHAGASVDLTIFSLHLAGISSILGAINFITTIINMKPPAISQYQTPLFVWAVLVTAVLLLLSLPVLA'
dat3 = coi5p(sequence_3 )
dat3 = frame(dat3)
sequence_3 = 'ggcgctcttctgggggatgaccaaatctataacgtgatcgtcacagcccatgccttcgttatgattttctttatagtcatgccaattataatcgggggctttggaaactgattaattcccctaataatcggagcccctgatatggcattccctcgaataaataacataagcttctgactccttcctccatcctttctcctcctcctgtcttcatcaggagttgaagccggcgcgggtactggatgaacagtatacccccctctagccggcaacctcgcccacgcaggagcctctgttgatttaactatcttctcccttcatttagctggaatctcctcaattttaggagccattaattttattacgaccattattaacataaaacctccagccatctctcagtaccaaaccccccttttcgtttgagccgtgctagttactgctgtccttctattactttccctccccgtcctggca'
#trimmed version of this, 81 missing from front, 93 missing from back.
#"ctctatttagtatttggtgcctgagccgggatagtaggcaccgccctgagtctactgattcgggcggaactaagccagccgggcgctcttctgggggatgaccaaatctataacgtgatcgtcacagcccatgccttcgttatgattttctttatagtcatgccaattataatcgggggctttggaaactgattaattcccctaataatcggagcccctgatatggcattccctcgaataaataacataagcttctgactccttcctccatcctttctcctcctcctgtcttcatcaggagttgaagccggcgcgggtactggatgaacagtatacccccctctagccggcaacctcgcccacgcaggagcctctgttgatttaactatcttctcccttcatttagctggaatctcctcaattttaggagccattaattttattacgaccattattaacataaaacctccagccatctctcagtaccaaaccccccttttcgtttgagccgtgctagttactgctgtccttctattactttccctccccgtcctggcagcaggcattactatgttacttacagaccgaaatctaaacaccactttctttgacccggcaggcgggggagatccaattttataccaacacctc"
sequence3_framed = '-------------------------------------------------------------------------------------gcgctcttctgggggatgaccaaatctataacgtgatcgtcacagcccatgccttcgttatgattttctttatagtcatgccaattataatcgggggctttggaaactgattaattcccctaataatcggagcccctgatatggcattccctcgaataaataacataagcttctgactccttcctccatcctttctcctcctcctgtcttcatcaggagttgaagccggcgcgggtactggatgaacagtatacccccctctagccggcaacctcgcccacgcaggagcctctgttgatttaactatcttctcccttcatttagctggaatctcctcaattttaggagccattaattttattacgaccattattaacataaaacctccagccatctctcagtaccaaaccccccttttcgtttgagccgtgctagttactgctgtccttctattactttccctccccgtcctggca'
sequence3_AAcensored = '----------------------------GALLGDDQIYNVIVTAHAFVMIFF?VMPI?IGGFGNWLIPL?IGAPDMAFPR?NN?SFWLLPPSFLLLLSSSGVEAGAGTGWTVYPPLAGNLAHAGASVDLTIFSLHLAGISSILGAINFITTIIN??PPAISQYQTPLFVWAVLVTAVLLLLSLPVLA'
sequence3_AA5 = '----------------------------GALLGDDQIYNVIVTAHAFVMIFFMVMPIMIGGFGNWLIPLMIGAPDMAFPRMNNMSFWLLPPSFLLLLSSSGVEAGAGTGWTVYPPLAGNLAHAGASVDLTIFSLHLAGISSILGAINFITTIINMKPPAISQYQTPLFVWAVLVTAVLLLLSLPVLA'
dat3 = coi5p(sequence_3 )
dat3 = frame(dat3)
dat3$framed
sequence3_framed
x = '-------------------------------------------------------------------------------------'
nchar(x)
y = '----------------------------------------------------'
nchar(y)
dat3$data$ntPath
dat3 = translate(dat3)
dat3
dat3 = indel_check(dat3)
dat3
dat3$data$ntPath
sequence_3 = 'tcttctgggggatgaccaaatctataacgtgatcgtcacagcccatgccttcgttatgattttctttatagtcatgccaattataatcgggggctttggaaactgattaattcccctaataatcggagcccctgatatggcattccctcgaataaataacataagcttctgactccttcctccatcctttctcctcctcctgtcttcatcaggagttgaagccggcgcgggtactggatgaacagtatacccccctctagccggcaacctcgcccacgcaggagcctctgttgatttaactatcttctcccttcatttagctggaatctcctcaattttaggagccattaattttattacgaccattattaacataaaacctccagccatctctcagtaccaaaccccccttttcgtttgagccgtgctagttactgctgtccttctattactttccctccccgtcctggca'
dat3 = coi5p(sequence_3 )
dat3 = frame(dat3)
dat3$framed
dat3$data$ntPath
sequence_3 = 'tgaccaaatctataacgtgatcgtcacagcccatgccttcgttatgattttctttatagtcatgccaattataatcgggggctttggaaactgattaattcccctaataatcggagcccctgatatggcattccctcgaataaataacataagcttctgactccttcctccatcctttctcctcctcctgtcttcatcaggagttgaagccggcgcgggtactggatgaacagtatacccccctctagccggcaacctcgcccacgcaggagcctctgttgatttaactatcttctcccttcatttagctggaatctcctcaattttaggagccattaattttattacgaccattattaacataaaacctccagccatctctcagtaccaaaccccccttttcgtttgagccgtgctagttactgctgtccttctattactttccctccccgtcctggca'
dat3 = coi5p(sequence_3 )
dat3 = frame(dat3)
dat3$framed
sequence_3 = 'tgaccaaatctataacgtgatcgtcacagcccatgccttcgttatgattttctttatagtcatgccaattataatcgggggctttggaaactgattaattcccctaataatcggagcccctgatatggcattccctcgaataaataacataagcttctgactccttcctccatcctttctcctcctcctgtcttcatcaggagttgaagccggcgcgggtactggatgaacagtatacccccctctagccggcaacctcgcccacgcaggagcctctgttgatttaactatcttctcccttcatttagctggaatctcctcaattttaggagccattaattttattacgaccattattaacataaaacctccagccatctctcagtaccaaaccccccttttcgtttgagccgtgctagttactgctgtccttctattactttccctccccgtcctggca'
dat3 = coi5p(sequence_3 )
dat3 = frame(dat3)
dat3$framed
dat3$data$ntPath
sequence_3 = 'caaatctataacgtgatcgtcacagcccatgccttcgttatgattttctttatagtcatgccaattataatcgggggctttggaaactgattaattcccctaataatcggagcccctgatatggcattccctcgaataaataacataagcttctgactccttcctccatcctttctcctcctcctgtcttcatcaggagttgaagccggcgcgggtactggatgaacagtatacccccctctagccggcaacctcgcccacgcaggagcctctgttgatttaactatcttctcccttcatttagctggaatctcctcaattttaggagccattaattttattacgaccattattaacataaaacctccagccatctctcagtaccaaaccccccttttcgtttgagccgtgctagttactgctgtccttctattactttccctccccgtcctggca'
dat3 = coi5p(sequence_3 )
dat3 = frame(dat3)
dat3
dat3$framed
dat3$data$ntPath
x = '---------------------------------------------------------------------------------------------------------'
nchar(x)
#trimmed version of this, 102 missing from front, 93 missing from back.
#"ctctatttagtatttggtgcctgagccgggatagtaggcaccgccctgagtctactgattcgggcggaactaagccagccgggcgctcttctgggggatgaccaaatctataacgtgatcgtcacagcccatgccttcgttatgattttctttatagtcatgccaattataatcgggggctttggaaactgattaattcccctaataatcggagcccctgatatggcattccctcgaataaataacataagcttctgactccttcctccatcctttctcctcctcctgtcttcatcaggagttgaagccggcgcgggtactggatgaacagtatacccccctctagccggcaacctcgcccacgcaggagcctctgttgatttaactatcttctcccttcatttagctggaatctcctcaattttaggagccattaattttattacgaccattattaacataaaacctccagccatctctcagtaccaaaccccccttttcgtttgagccgtgctagttactgctgtccttctattactttccctccccgtcctggcagcaggcattactatgttacttacagaccgaaatctaaacaccactttctttgacccggcaggcgggggagatccaattttataccaacacctc"
sequence3_framed = '-------------------------------------------------------------------------------------gcgctcttctgggggatgaccaaatctataacgtgatcgtcacagcccatgccttcgttatgattttctttatagtcatgccaattataatcgggggctttggaaactgattaattcccctaataatcggagcccctgatatggcattccctcgaataaataacataagcttctgactccttcctccatcctttctcctcctcctgtcttcatcaggagttgaagccggcgcgggtactggatgaacagtatacccccctctagccggcaacctcgcccacgcaggagcctctgttgatttaactatcttctcccttcatttagctggaatctcctcaattttaggagccattaattttattacgaccattattaacataaaacctccagccatctctcagtaccaaaccccccttttcgtttgagccgtgctagttactgctgtccttctattactttccctccccgtcctggca'
dat3$framed
dat3 = translate(dat3)
dat3$aaSeq
library(coi5p)
load('R/sysdata.rda')
View(nt_PHMM)
library(coi5p)
library(tidyverse)
load('R/sysdata.rda')
trans_df = read_tsv('/home/cnuge/Desktop/trans_df_revised.tsv')
trans_df
use_data(nt_PHMM, aa_PHMM, trans_df, example_nt_string, overwrite = TRUE, internal = TRUE)
library(devtools)
use_data(nt_PHMM, aa_PHMM, trans_df, example_nt_string, overwrite = TRUE, internal = TRUE)
library(coi5p)
head(trans_df)
trans_df[trans_df$phylogeny == "entomobryidae"]
trans_df[trans_df$phylogeny == "entomobryidae",]
View(trans_df)
trans_df = read_tsv('/home/cnuge/Desktop/trans_df_revised.tsv')
trans_df = as.data.frame(trans_df)
View(trans_df)
head(trans_df)
trans_df[trans_df$phylogeny == "entomobryidae",]
is.na(trans_df)
drop_na(trans_df)
trans_df = read_tsv('/home/cnuge/Desktop/trans_df_revised.tsv')
trans_df
trans_df[is.na(trans_df$phylogeny),]
trans_df[is.na(trans_df$phylogeny),]
trans_df = read_tsv('/home/cnuge/Desktop/trans_df_revised.tsv')
trans_df = as.data.frame(trans_df)
trans_df[trans_df$phylogeny == "entomobryidae",]
use_data(nt_PHMM, aa_PHMM, trans_df, example_nt_string, overwrite = TRUE, internal = TRUE)
library(coi5p)
library(coi5p)
library(coi5p)
library(devtools)
devtools::document()
library(coi5p)
library(coi5p)
output = coi5p_pipe(example_nt_string)
output
library(coi5p)
library(devtools)
devtools::revdep_check()
revdep_check()
devtools::revdep()
?devtools::revdep
library(coil)
library(devtools)
?devtools::check()
?devtools::check()
devtools::check()
devtools::release()
devtools::release()
devtools::release()
devtools::spell_check()
spell_check()
install.packages('spelling')
spell_check()
spell_check()
x = spell_check()
x
x[1]
x[[1]
]
x[[1]]
names(X)
names(x)
head(x)
library(tidyverse)
write_tsv(x, 'spellcheck.tsv')
write(x, 'spellcheck.tsv')
x
print(x)
x
head(x)
x$word
?spell_check
View(x)
View(x)
x = spell_check()
x = spell_check()
devtools::document()
x = spell_check()
View(x)
View(x)
devtools::document()
devtools::revdep_check()
devtools::release()
library(coil)
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
example_nt_string
output = coi5p_pipe(example_nt_string)
output
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
output = coi5p_pipe(example_nt_string)
output
#see the available components
names(output)
#retrieve only the amino acid sequence from the object
output$aaSeq
#see the available components
names(output)
#retrieve only the amino acid sequence from the object
output$aaScore
ex_table_to_use = which_trans_table("Scyliorhinidae")
ex_table_to_use
output = coi5p_pipe(example_nt_string, trans_table = ex_table_to_use)
output
#build the coi5p object
dat = coi5p(example_nt_string, name="example_sequence_1")
#frame the sequence
dat = frame(dat)
#since we determined the genetic code above, we can use
#the proper transaltion table as opposed to conducting
#the default censored translation
dat = translate(dat, trans_table = 2)
#check to see if an insertion or deletion is likely
dat = indel_check(dat)
dat
#this is the example data
dim(example_barcode_data)
example_barcode_data
#this is the example data
dim(example_barcode_data)
names(example_barcode_data)
#this is the example data
dim(example_barcode_data)
names(example_barcode_data)
# to look at the full dataframe:
# example_barcode_data
example_barcode_data$coi_output = lapply(1:length(example_barcode_data$id), function(i){
coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
})
example_barcode_data$coi_output[[1]] #example of the first output
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]]) < nchar(example_barcode_data$sequence[[5]])
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]]) < nchar(example_barcode_data$sequence[[5]])
#extract only a single column
flatten_coi5p(example_barcode_data$coi_output, keep_cols = 'aaSeq')
#extract multiple columns
flatten_coi5p(example_barcode_data$coi_output, keep_cols = c('framed','aaSeq'))
#extract all columns
full_coi5p_df = flatten_coi5p(example_barcode_data$coi_output)
#full_coi5p_df
#extract only a single column
col_df = flatten_coi5p(example_barcode_data$coi_output, keep_cols = 'aaSeq')
#extract multiple columns
multi_df = flatten_coi5p(example_barcode_data$coi_output, keep_cols = c('framed','aaSeq'))
#extract all columns
full_coi5p_df = flatten_coi5p(example_barcode_data$coi_output)
#full_coi5p_df
full_coi5p_df = data.frame(matrix(ncol = 7, nrow = 0),stringsAsFactors = FALSE )
colnames(full_coi5p_df) = c("name", "raw", "framed", "aaSeq", "aaScore", "indel_likely", "stop_codons")
for(i in 1:length(example_barcode_data$id)){
print(paste("On sequence number:", i))
out_data = coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
#for extreme memory conservation - could write each line of output to a .csv
#instead of binding it to an output dataframe.
full_coi5p_df = rbind(full_coi5p_df, flatten_coi5p(list(out_data)))
}
full_coi5p_df = data.frame(matrix(ncol = 7, nrow = 0),stringsAsFactors = FALSE )
colnames(full_coi5p_df) = c("name", "raw", "framed", "aaSeq", "aaScore", "indel_likely", "stop_codons")
for(i in 1:length(example_barcode_data$id)){
out_data = coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
#for extreme memory conservation - could write each line of output to a .csv
#instead of binding it to an output dataframe.
full_coi5p_df = rbind(full_coi5p_df, flatten_coi5p(list(out_data)))
}
library(seqinr)
# load the example fasta file included with coil
# included in the file's header line:
# the name of the sample, its genetic code, taxonomic designation and some notes
ex_fasta_file = system.file("extdata/example_barcode_data.fasta", package = "coil")
#read in the example fasta file using seqinr
ex_data = seqinr::read.fasta(ex_fasta_file, as.string = TRUE)
#here is what the output from read.fasta looks like
head(ex_data)
#parse the data in the header line by splitting the name on the | character
parsed_names_data = lapply(1:length(ex_data), function(i){
unlist(strsplit(names(ex_data)[[i]],"\\|"))
})
# subset the components of the header line and build these and the sequence
# into a dataframe matching the style used in the coi5p batch example
example_barcode_data_from_scratch = data.frame(
id = sapply(parsed_names_data, function(x) x[[1]]),
genetic_code = sapply(parsed_names_data, function(x) x[[2]]),
taxa = sapply(parsed_names_data, function(x) x[[3]]),
sequence = unname(unlist(ex_data)),
notes = sapply(parsed_names_data, function(x) x[[4]])
)
head(example_barcode_data_from_scratch)
library(seqinr)
# load the example fasta file included with coil
# included in the file's header line:
# the name of the sample, its genetic code, taxonomic designation and some notes
ex_fasta_file = system.file("extdata/example_barcode_data.fasta", package = "coil")
#read in the example fasta file using seqinr
ex_data = seqinr::read.fasta(ex_fasta_file, as.string = TRUE)
#here is what the output from read.fasta looks like
#head(ex_data)
#parse the data in the header line by splitting the name on the | character
parsed_names_data = lapply(1:length(ex_data), function(i){
unlist(strsplit(names(ex_data)[[i]],"\\|"))
})
# subset the components of the header line and build these and the sequence
# into a dataframe matching the style used in the coi5p batch example
example_barcode_data_from_scratch = data.frame(
id = sapply(parsed_names_data, function(x) x[[1]]),
genetic_code = sapply(parsed_names_data, function(x) x[[2]]),
taxa = sapply(parsed_names_data, function(x) x[[3]]),
sequence = unname(unlist(ex_data)),
notes = sapply(parsed_names_data, function(x) x[[4]])
)
#head(example_barcode_data_from_scratch)
devtools::check()
devtools::check()
devtools::build_manual()
library(devtools)
devtools::build_manual()
devtools::document()
library(coil)
?coi5p_pipe()
library(coil)
library(coil)
library(coil)
example_nt_string
output = coi5p_pipe(example_nt_string)
output
output$framed
output$aaSeq
output = coi5p_pipe(example_nt_string, trans_table = 5)
output$aaSeq
output$indel_likely
x = "ctacttgattttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta
y = coi5p_pipe(x)
""
x = "ctacttgattttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta"
x = "ctacttgattttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta"
y = coi5p_pipe(x)
y
y$aaSeq
y$data$ntPath
y$data$aaPath
#extract only a single column
col_df = flatten_coi5p(example_barcode_data$coi_output, keep_cols = 'aaSeq')
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]]) < nchar(example_barcode_data$sequence[[5]])
#extract only a single column
col_df = flatten_coi5p(example_barcode_data$coi_output, keep_cols = 'aaSeq')
full_coi5p_df = data.frame(matrix(ncol = 7, nrow = 0),stringsAsFactors = FALSE )
colnames(full_coi5p_df) = c("name", "raw", "framed",
"aaSeq", "aaScore", "indel_likely", "stop_codons")
for(i in 1:length(example_barcode_data$id)){
out_data = coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
#for extreme memory conservation - could write each line of output to a .csv
#instead of binding it to an output dataframe.
full_coi5p_df = rbind(full_coi5p_df, flatten_coi5p(list(out_data)))
}
full_coi5p_df = data.frame(matrix(ncol = 7, nrow = 0),stringsAsFactors = FALSE )
colnames(full_coi5p_df) = c("name", "raw", "framed",
"aaSeq", "aaScore", "indel_likely", "stop_codons")
for(i in 1:length(example_barcode_data$id)){
out_data = coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
#for extreme memory conservation - could write each line of output to a .csv
#instead of binding it to an output dataframe.
full_coi5p_df = rbind(full_coi5p_df, flatten_coi5p(list(out_data)))
full_coi5p_df
}
full_coi5p_df = data.frame(matrix(ncol = 7, nrow = 0),stringsAsFactors = FALSE )
colnames(full_coi5p_df) = c("name", "raw", "framed",
"aaSeq", "aaScore", "indel_likely", "stop_codons")
for(i in 1:length(example_barcode_data$id)){
out_data = coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
#for extreme memory conservation - could write each line of output to a .csv
#instead of binding it to an output dataframe.
full_coi5p_df = rbind(full_coi5p_df, flatten_coi5p(list(out_data)))
}
full_coi5p_df
library(coil)
vignette('coil-vignette')
library(coil)
vignette('coil-vignette')
library(coil)
vignette('coil-vignette')
devtools::install_github("CNuge/coil", build_vignettes = TRUE)
library(coil)
vignette('coil-vignette')
censored_translation(example_nt_string)
censored_translation(example_nt_string, reading_frame = 2)
example_nt_string
example_barcode_data
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?coil
devtools::document()
library(devtools)
devtools::document()
library(coil)
?coil
devtools::document()
?coil
library(coil)
?coil
devtools::document()
library(coil)
library(coil)
library(devtools)
devtools::document()
library(coil)
devtools::document()
library(coil)
library(coil)
library(coil)
library(coil)
library(coil)
output = coi5p_pipe(example_nt_string)
output
names(output)
library(coil)
output = coi5p_pipe(example_nt_string)
output
#see the available components
names(output)
#retrieve only the amino acid sequence from the object
output$aaScore
ex_table_to_use = which_trans_table("Scyliorhinidae")
ex_table_to_use
output = coi5p_pipe(example_nt_string, trans_table = ex_table_to_use)
output
#this is the example data
dim(example_barcode_data)
names(example_barcode_data)
# to look at the full dataframe:
# example_barcode_data
example_barcode_data$coi_output = lapply(1:length(example_barcode_data$id), function(i){
coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
})
example_barcode_data$coi_output[[1]] #example of the first output
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]]) < nchar(example_barcode_data$sequence[[5]])
example_barcode_data$coi_output = lapply(1:length(example_barcode_data$id), function(i){
coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
})
example_barcode_data$coi_output[[1]] #example of the first output
#extract only a single column
col_df = flatten_coi5p(example_barcode_data$coi_output, keep_cols = 'aaSeq')
#extract multiple columns
multi_df = flatten_coi5p(example_barcode_data$coi_output, keep_cols = c('framed','aaSeq'))
#extract all columns
full_coi5p_df = flatten_coi5p(example_barcode_data$coi_output)
#full_coi5p_df
full_coi5p_df
full_coi5p_df = data.frame(matrix(ncol = 7, nrow = 0),stringsAsFactors = FALSE )
colnames(full_coi5p_df) = c("name", "raw", "framed",
"aaSeq", "aaScore", "indel_likely", "stop_codons")
for(i in 1:length(example_barcode_data$id)){
out_data = coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
#for extreme memory conservation - could write each line of output to a .csv
#instead of binding it to an output dataframe.
full_coi5p_df = rbind(full_coi5p_df, flatten_coi5p(list(out_data)))
}
full_coi5p_df
full_coi5p_df = data.frame(matrix(ncol = 7, nrow = 0),stringsAsFactors = FALSE )
colnames(full_coi5p_df) = c("name", "raw", "framed",
"aaSeq", "aaScore", "indel_likely", "stop_codons")
for(i in 1:length(example_barcode_data$id)){
out_data = coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
#for extreme memory conservation - could write each line of output to a .csv
#instead of binding it to an output dataframe.
full_coi5p_df = rbind(full_coi5p_df, flatten_coi5p(list(out_data)))
}
full_coi5p_df
names(full_coi5p_df)
full_coi5p_df = data.frame(matrix(ncol = 7, nrow = 0),stringsAsFactors = FALSE )
colnames(full_coi5p_df) = c("name", "raw", "framed", "was_trimmed", "align_report",
"aaSeq", "aaScore", "indel_likely", "stop_codons")
full_coi5p_df = data.frame(matrix(ncol = 9, nrow = 0),stringsAsFactors = FALSE )
colnames(full_coi5p_df) = c("name", "raw", "framed", "was_trimmed", "align_report",
colnames(full_coi5p_df) = c("name", "raw", "framed", "was_trimmed", "align_report",
colnames(full_coi5p_df) = c("name", "raw", "framed", "was_trimmed", "align_report",
"aaSeq", "aaScore", "indel_likely", "stop_codons")
full_coi5p_df
full_coi5p_df = data.frame(matrix(ncol = 9, nrow = 0),stringsAsFactors = FALSE )
full_coi5p_df
colnames(full_coi5p_df) = c("name", "raw", "framed", "was_trimmed", "align_report",
"aaSeq", "aaScore", "indel_likely", "stop_codons")
full_coi5p_df
full_coi5p_df
for(i in 1:length(example_barcode_data$id)){
out_data = coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
#for extreme memory conservation - could write each line of output to a .csv
#instead of binding it to an output dataframe.
full_coi5p_df = rbind(full_coi5p_df, flatten_coi5p(list(out_data)))
}
full_coi5p_df
library(seqinr)
# load the example fasta file included with coil
# included in the file's header line:
# the name of the sample, its genetic code, taxonomic designation and some notes
ex_fasta_file = system.file("extdata/example_barcode_data.fasta", package = "coil")
#read in the example fasta file using seqinr
ex_data = seqinr::read.fasta(ex_fasta_file, as.string = TRUE)
#here is what the output from read.fasta looks like
#head(ex_data)
#parse the data in the header line by splitting the name on the | character
parsed_names_data = lapply(1:length(ex_data), function(i){
unlist(strsplit(names(ex_data)[[i]],"\\|"))
})
# subset the components of the header line and build these and the sequence
# into a dataframe matching the style used in the coi5p batch example
example_barcode_data_from_scratch = data.frame(
id = sapply(parsed_names_data, function(x) x[[1]]),
genetic_code = sapply(parsed_names_data, function(x) x[[2]]),
taxa = sapply(parsed_names_data, function(x) x[[3]]),
sequence = unname(unlist(ex_data)),
notes = sapply(parsed_names_data, function(x) x[[4]])
)
#head(example_barcode_data_from_scratch)
library(devtools)
use_build_ignore('man/coilHex.png')
