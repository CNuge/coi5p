#' @param frame_offset The offset to the reading frame to be applied for translation. By default the offset
#' is zero, so the first character in the framed sequence is considered the first nucelotide of the first codon.
#' Passing frame_offset = 1 would make the second character in the framed sequence the the first nucelotide of
#' the first codon.
#'
#'
#' @return an object of class code{"coi5p"}
#' @seealso \code{\link{coi5p}}
#' @seealso \code{\link{frame}}
#' @seealso \code{\link{which_trans_table}}
#' @examples
#' #previously run functions:
#' dat = coi5p(example_nt_string )
#' dat = frame(dat)
#' #translate when the translation table is not known:
#' dat = translate(dat)
#' #translate when the translation table is known:
#' dat = translate(dat, trans_table = 5)
#' #additional components in output coi5p object:
#' dat$aaSeq
#'@name translate
translate = function(x, ...){
UseMethod("translate")
}
####
#' @rdname translate
#' @export
translate.coi5p = function(x, ..., trans_table = 0, frame_offset = 0){
if(is.null(x$framed)){
stop("translate function accepts framed coi5p objects. See function: frame.")
}
if(trans_table == 0){
x$aaSeq = censored_translation(x$framed, reading_frame = (frame_offset+1))
}else{
#split the DNA string into a vector, all characters to lower case
dna_list = strsplit(gsub('-', 'n', as.character(tolower(x$framed))),"")
dna_vec = dna_list[[1]]
#translate using the designated numcode, returns a vector of AAs
aa_vec = seqinr::translate(dna_vec, frame = frame_offset, numcode=trans_table, ambiguous= TRUE, NAstring = '-')
x$aaSeq = paste(aa_vec, collapse= "")
}
return(x)
}
#' Check is coi5p sequence likely contains an indel error.
#'
#'
#' @param x a coi5p class object for which frame() and translate() have been run.
#' @param indel_threshold the log likelihood threshold used to assess whether or not sequences
#' @param ... additional arguments to be passed between methods.
#' are likely to contain an indel. Default is -345.95. Values lower than this will be classified
#' as likely to contain an indel and values higer will be classified as not likely to contain an indel.
#'
#' @return an object of class code{"coi5p"}
#' @seealso \code{\link{coi5p}}
#' @seealso \code{\link{frame}}
#' @seealso \code{\link{translate}}
#' @examples
#' #previously run functions:
#' dat = coi5p(example_nt_string)
#' dat = frame(dat)
#' dat = translate(dat)
#' #current function
#' dat = indel_check(dat)
#' #with custom indel threshold
#' dat = indel_check(dat, indel_threshold = -400)
#' #additional components in output coi5p object:
#' dat$stop_codons #Boolean - Indicates if there are stop codons in the amino acid sequence.
#' dat$indel_likely #Boolean - Indicates if there is likely a insertion or deletion in the sequence.
#' dat$aaScore #view the amino acid log likelihood score
#' @name indel_check
indel_check = function(x, ...){
UseMethod("indel_check")
}
####
#' @rdname indel_check
#' @export
indel_check.coi5p = function(x, ..., indel_threshold = -346.95 ){
if(is.null(x$framed)|is.null(x$aaSeq) ){
stop("indel_check function accepts framed and translated coi5p objects. See functions: frame, translate.")
}
x$data$aaBin = individual_AAbin(x$aaSeq)
x$data$aaPHMMout = aphid::Viterbi(aa_PHMM, x$data$aaBin, odds = FALSE)
x$aaScore = x$data$aaPHMMout[['score']] #have this print a threshold
if(x$aaScore > indel_threshold){
x$indel_likely = FALSE
}else{
x$indel_likely = TRUE
}
if(grepl('\\*', x$aaSeq)){
x$stop_codons = TRUE
}else{
x$stop_codons = FALSE
}
return(x)
}
sequence = 'ctttacctgatttttggtgcatgagcaggtatagttggaacagccctaagtctcctaattcgagctgaacttgggcaacctggatcacttttaggagatgatcagatttataatgtaatcgtaaccgcccacgcttttgtaataatctttttcatggttataccaattataattggtggtttcggaaattgattagttcctttaataattggagcgccagatatagccttcccacgaataaataacataagtttctgacttcttccaccatcatttcttcttctcctcgcctctgctggagtagaagctggagcaggtactggttgaacagtttatcctccattagctagcaatctagcacatgctggaccatctgttgatttagctattttttctcttcacttagccggtgtttcatcaattttagcttcaattaattttatcacaaccattattaatataaaaccaccagctatttcccaatatcaaacaccattatttgtttgatctattcttgtaaccactattcttcttctcctctcacttccagttcttgcagcaggaattacaatattacttacagatcgtaaccttaatactacattctttgaccctgcaggtggaggagacccaatcctttatcaacattta'
coi5p()
dat = coi5p(sequence)
translate(dat)
indel_check(dat)
devtools::document()
devtools::document()
devtools::check()
devtools::document()
library(coi5p)
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
example_nt_string
output = coi5p_pipe(example_nt_string)
output
#see the avaliable components
names(output)
#retrieve only the amino acid sequence from the object
output$aaSeq
ex_table_to_use = which_trans_table("Scyliorhinidae")
ex_table_to_use
output = coi5p_pipe(example_nt_string, trans_table = ex_table_to_use)
output
#build the coi5p object
dat = coi5p(example_nt_string, name="example_sequence_1")
#frame the sequence
dat = frame(dat)
#since we determined the genetic code above, we can use
#the proper transaltion table as opposed to conducting
#the default censored translation
dat = translate(dat, trans_table = 2)
#check to see if an insertion or deletion is likely
dat = indel_check(dat)
dat
#this is the example data
dim(example_barcode_data)
example_barcode_data
ex_test = example_barcode_data$sequence[3]
nchar(ex_test)
ex_test
for(i in 1:length(example_barcode_data$id)){
if(is.na(example_barcode_data$genetic_code[[i]])){
example_barcode_data[i, "genetic_code"] = which_trans_table(example_barcode_data$taxa[[i]])
}
}
?load
example_barcode_data
example_barcode_data$taxa
load('data/example_barcode_data.RData', stringsAsFactors=FALSE)
as.tibble(example_barcode_data)
library(tidyverse)
example_barcode_data = as.tibble(example_barcode_data)
example_barcode_data = as_tibble(example_barcode_data)
example_barcode_data
load('data/example_barcode_data.RData' )
View(example_barcode_data)
# save(example_barcode_data, file = 'data/example_barcode_data.RData')
# load('data/example_barcode_data.RData' )
for(i in names(example_barcode_data)){
example_barcode_data[[i]] = as.character(example_barcode_data[[i]])
}
example_barcode_data$taxa
names(example_barcode_data)
example_barcode_data[["genetic_code"]] = as.integer(example_barcode_data[["genetic_code"]])
save(example_barcode_data, file = 'data/example_barcode_data.RData')
load('data/example_barcode_data.RData' )
example_barcode_data$taxa
save(example_barcode_data, file = 'data/example_barcode_data.RData')
devtools::document()
Ctrl + Shift + E
library(coi5p)
library(coi5p)
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
example_nt_string
output = coi5p_pipe(example_nt_string)
output
ex_table_to_use = which_trans_table("Scyliorhinidae")
ex_table_to_use
output = coi5p_pipe(example_nt_string, trans_table = ex_table_to_use)
output
#this is the example data
dim(example_barcode_data)
example_barcode_data
for(i in 1:length(example_barcode_data$id)){
if(is.na(example_barcode_data$genetic_code[[i]])){
example_barcode_data[i, "genetic_code"] = which_trans_table(example_barcode_data$taxa[[i]])
}
}
example_barcode_data
example_barcode_data
shortproblem = example_barcode_data$sequence[3]
shortproblem
roblem = example_barcode_data$sequence[3]
table_ex = 5
output = coi5p_pipe(shortproblem, tra
shortproblem = example_barcode_data$sequence[3]
shortproblem = example_barcode_data$sequence[3]
table_ex = 5
output = coi5p_pipe(shortproblem, trans_table = table_ex)
output
example_barcode_data$notes[3]
substr(shortproblem, 5 )
nchar(shortproblem)
substr(shortproblem, 5 , nchar(shortproblem))
shorter_version = substr(shortproblem, 5 , nchar(shortproblem))
shorter_version
output2 = coi5p_pipe(shorter_version, trans_table = table_ex)
output2
example_barcode_data$notes[3]
example_barcode_data$sequence[3] = shorter_version
example_barcode_data$notes[3] = "21_leading_missing_7_trailing_missing"
example_barcode_data
shorter_version
example_barcode_data
save(example_barcode_data, file = 'data/example_barcode_data.RData')
load('data/example_barcode_data.RData' )
example_barcode_data
Ctrl + Shift + E
library(coi5p)
library(coi5p)
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
example_nt_string
output = coi5p_pipe(example_nt_string)
output
#see the avaliable components
names(output)
#retrieve only the amino acid sequence from the object
output$aaSeq
ex_table_to_use = which_trans_table("Scyliorhinidae")
ex_table_to_use
output = coi5p_pipe(example_nt_string, trans_table = ex_table_to_use)
output
#build the coi5p object
dat = coi5p(example_nt_string, name="example_sequence_1")
#frame the sequence
dat = frame(dat)
#since we determined the genetic code above, we can use
#the proper transaltion table as opposed to conducting
#the default censored translation
dat = translate(dat, trans_table = 2)
#check to see if an insertion or deletion is likely
dat = indel_check(dat)
dat
#this is the example data
dim(example_barcode_data)
example_barcode_data
example_barcode_data$coi_output = lapply(1:length(example_barcode_data$id), function(i){
coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
})
example_barcode_data$coi_output[[1]]
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[4]]) < nchar(example_barcode_data$sequence[[4]])
example_barcode_data
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[4]])
nchar(example_barcode_data$sequence[[4]])
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]])
nchar(example_barcode_data$sequence[[5]])
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]]) < nchar(example_barcode_data$sequence[[5]])
#extract only a single column
flatten_coi5p(example_barcode_data$coi_output, keep_cols = 'aaSeq')
#extract multiple columns
flatten_coi5p(example_barcode_data$coi_output, keep_cols = c('framed','aaSeq'))
#extract all columns
full_coi5p_df = flatten_coi5p(example_barcode_data$coi_output)
full_coi5p_df
which_trans_table("Scyliorhinidae")
library(coi5p)
?coi5p
example_nt_string
library(coi5p)
example_barcode_data
?coi5p_pipe
sequence = 'aaccgctgattattttcaaccaaccacaaagatatcggcaaactttatattttatttttggagcttgagctggaatagttggaacatctttaagaattttaattcgagctgaattaggacatcctggagcattaattggagatgatcaaatttataatgtaattgtaactgcacatgcttttattataattttttttatggttatacctattataattggtggatttggaaattgattagtgcctttaatattaggtgctcctgatatagcattcccacgaataaataatataagattttgactactacctcctgctctttctttactattagtaagtagaatagttgaaaatggagctggaacaggatgaactgtttatccacctttatccgctggaattgctcatggtggagcttcagttgatttagctattttttctctacatttagcagggatttcttcaattttaggagctctaaattttattacaactgtaattaatatacgatcaacaggaatttcattagatcgtatacctttatttgtttgatcagtagttattactgctttattattgttattatcacttccagtactagcaggagctattactatattattaacagatcgaaatttaaatacatcattttttgacccagcgggaggaggagatcctattttatatcaacatttattatttattta'
sequence_framed = '-ctttatattttatttttggagcttgagctggaatagttggaacatctttaagaattttaattcgagctgaattaggacatcctggagcattaattggagatgatcaaatttataatgtaattgtaactgcacatgcttttattataattttttttatggttatacctattataattggtggatttggaaattgattagtgcctttaatattaggtgctcctgatatagcattcccacgaataaataatataagattttgactactacctcctgctctttctttactattagtaagtagaatagttgaaaatggagctggaacaggatgaactgtttatccacctttatccgctggaattgctcatggtggagcttcagttgatttagctattttttctctacatttagcagggatttcttcaattttaggagctctaaattttattacaactgtaattaatatacgatcaacaggaatttcattagatcgtatacctttatttgtttgatcagtagttattactgctttattattgttattatcacttccagtactagcaggagctattactatattattaacagatcgaaatttaaatacatcattttttgacccagcgggaggaggagatcctattttatatcaacattta'
sequence_AAcensored = "-LYFIFGAWAG?VGTSL?ILIRAELGHPGALIGDDQIYNVIVTAHAFI?IFFMV?PI?IGGFGNWLVPL?LGAPD?AFPR?NN??FWLLPPALSLLLVS??VENGAGTGWTVYPPLSAGIAHGGASVDLAIFSLHLAGISSILGALNFITTVIN?RSTGISLDR?PLFVWSVVITALLLLLSLPVLAGAIT?LLTDRNLNTSFFDPAGGGDPILYQHL"
sequence_AA5 = "-LYFIFGAWAGMVGTSLSILIRAELGHPGALIGDDQIYNVIVTAHAFIMIFFMVMPIMIGGFGNWLVPLMLGAPDMAFPRMNNMSFWLLPPALSLLLVSSMVENGAGTGWTVYPPLSAGIAHGGASVDLAIFSLHLAGISSILGALNFITTVINMRSTGISLDRMPLFVWSVVITALLLLLSLPVLAGAITMLLTDRNLNTSFFDPAGGGDPILYQHL"
dat = coi5p(sequence )
dat = frame(dat)
dat
dat = translate(dat)
dat
library(coi5p)
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
example_nt_string
output = coi5p_pipe(example_nt_string)
output
#see the avaliable components
names(output)
#retrieve only the amino acid sequence from the object
output$aaSeq
ex_table_to_use = which_trans_table("Scyliorhinidae")
ex_table_to_use
output = coi5p_pipe(example_nt_string, trans_table = ex_table_to_use)
output
#build the coi5p object
dat = coi5p(example_nt_string, name="example_sequence_1")
#frame the sequence
dat = frame(dat)
#since we determined the genetic code above, we can use
#the proper transaltion table as opposed to conducting
#the default censored translation
dat = translate(dat, trans_table = 2)
#check to see if an insertion or deletion is likely
dat = indel_check(dat)
dat
#this is the example data
dim(example_barcode_data)
example_barcode_data
example_barcode_data$coi_output = lapply(1:length(example_barcode_data$id), function(i){
coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
})
example_barcode_data$coi_output[[1]] #example of the first output
example_barcode_data$coi_output = coi5p_pipe(example_barcode_data$sequence,
name = example_barcode_data$id,
trans_table = example_barcode_data$genetic_code)
example_barcode_data$coi_output = coi5p(example_barcode_data$sequence,
name = example_barcode_data$id)
example_barcode_data$coi_output = coi5p(example_barcode_data$sequence,
name = example_barcode_data$id)
example_barcode_data$coi_output = coi5p(example_barcode_data$sequence,
name = example_barcode_data$id)
example_barcode_data$sequence
example_barcode_data$coi_output = coi5p(example_barcode_data$sequence,
)
x = '----------ATGASTAGATAGTATGGGACXCCACACCT---------------------'
y = x
x = list(raw=y)
x$raw
substr(x$raw,1, 25)
nchar(substr(x$raw,1, 25))
substr(x$raw,(length(x$raw)-25),length(x$raw))
x$raw
substr(x$raw,(nchar(x$raw)-25), nchar(x$raw))
nchar( substr(x$raw,(nchar(x$raw)-25), nchar(x$raw)))
library(coi5p)
library(coi5p)
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
example_nt_string
output = coi5p_pipe(example_nt_string)
output
library(coi5p)
library(coi5p)
load('R/sysdata.rda')
plot(nt_PHMM, from="start", to = 6)
nt_PHMM
plot(nt_PHMM , from=0, to = 5)
plot(aa_PHMM , from=0, to = 5)
plot(nt_PHMM, from="start", to = 6, just= 'left')
plot(x = nt_PHMM, from="start", to = 6, just= 'left')
nt_PHMM
plot.PHMM(x = nt_PHMM, from="start", to = 6, just= 'left')
library(aphid)
plot.PHMM(x = nt_PHMM, from="start", to = 6, just= 'left')
plot.PHMM(x = nt_PHMM, from="start", to = 10, just= 'left')
plot.PHMM(x = nt_PHMM, from=647, to = 657, just= 'right')
plot.PHMM(x = nt_PHMM, from="start", to = 10, just= 'left')
plot.PHMM(x = aa_PHMM, from="start", to = 5, just= 'left')
plot.PHMM(x = aa_PHMM, from=214, to = 219, just= 'right')
plot.PHMM(x = aa_PHMM, from=215, to = 219, just= 'right')
plot.PHMM(x = aa_PHMM, from=215, to = 219)
plot.PHMM(x = nt_PHMM, from=648, to = 657, just= 'right')
plot.PHMM(x = nt_PHMM, from="start", to = 10, just= 'left')
library(coi5p)
example_nt_string = 'ctctacttgatttttggtgcatgagcaggaatagttggaatagctttaagtttactaattcgcgctgaactaggtcaacccggatctcttttaggggatgatcagatttataatgtgatcgtaaccgcccatgcctttgtaataatcttttttatggttatacctgtaataattggtggctttggcaattgacttgttcctttaataattggtgcaccagatatagcattccctcgaataaataatataagtttctggcttcttcctccttcgttcttacttctcctggcctccgcaggagtagaagctggagcaggaaccggatgaactgtatatcctcctttagcaggtaatttagcacatgctggcccctctgttgatttagccatcttttcccttcatttggccggtatctcatcaattttagcctctattaattttattacaactattattaatataaaacccccaactatttctcaatatcaaacaccattatttgtttgatctattcttatcaccactgttcttctactccttgctctccctgttcttgcagccggaattacaatattattaacagaccgcaacctcaacactacattctttgaccccgcagggggaggggacccaattctctatcaacactta'
example_nt_string
output = coi5p_pipe(example_nt_string)
output
#see the avaliable components
names(output)
#retrieve only the amino acid sequence from the object
output$aaSeq
ex_table_to_use = which_trans_table("Scyliorhinidae")
ex_table_to_use
output = coi5p_pipe(example_nt_string, trans_table = ex_table_to_use)
output
#build the coi5p object
dat = coi5p(example_nt_string, name="example_sequence_1")
#frame the sequence
dat = frame(dat)
#since we determined the genetic code above, we can use
#the proper transaltion table as opposed to conducting
#the default censored translation
dat = translate(dat, trans_table = 2)
#check to see if an insertion or deletion is likely
dat = indel_check(dat)
dat
#this is the example data
dim(example_barcode_data)
example_barcode_data
example_barcode_data$coi_output = lapply(1:length(example_barcode_data$id), function(i){
coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
})
example_barcode_data$coi_output[[1]] #example of the first output
example_barcode_data$framed_seq = unlist(lapply(example_barcode_data$coi_output, function(x){
x$framed
}))
example_barcode_data$framed_seq
#has coi5p trimmed characters?
nchar(example_barcode_data$framed_seq[[5]]) < nchar(example_barcode_data$sequence[[5]])
#extract only a single column
flatten_coi5p(example_barcode_data$coi_output, keep_cols = 'aaSeq')
#extract multiple columns
flatten_coi5p(example_barcode_data$coi_output, keep_cols = c('framed','aaSeq'))
#extract all columns
full_coi5p_df = flatten_coi5p(example_barcode_data$coi_output)
full_coi5p_df
full_coi5p_df = data.frame(matrix(ncol = 7, nrow = 0),stringsAsFactors = FALSE )
colnames(full_coi5p_df) = c("name", "raw", "framed", "aaSeq", "aaScore", "indel_likely", "stop_codons")
for(i in 1:length(example_barcode_data$id)){
print(paste("On sequence number:", i))
out_data = coi5p_pipe(example_barcode_data$sequence[i],
name = example_barcode_data$id[i],
trans_table = example_barcode_data$genetic_code[i])
full_coi5p_df = rbind(full_coi5p_df, flatten_coi5p(list(out_data)))
}
library(seqinr)
# example fasta file included with coi5p
# included in the header line:
# the name of the sample, its genetic code, taxonomic designation and some notes
ex_fasta_file = system.file("extdata/example_barcode_data.fasta", package = "coi5p")
#read in the example fasta file using seqinr
ex_data = seqinr::read.fasta(ex_fasta_file, as.string = TRUE)
#here is what the output from read.fasta looks like
head(ex_data)
#parse the data in the header line by splitting the name on the | character
parsed_names_data = lapply(1:length(ex_data), function(i){
unlist(strsplit(names(ex_data)[[i]],"\\|"))
})
# subset the components of the header line and build these and the sequence
# into a dataframe matching the style used in the coi5p batch example
example_barcode_data_from_scratch = data.frame(
id = sapply(parsed_names_data, function(x) x[[1]]),
genetic_code = sapply(parsed_names_data, function(x) x[[2]]),
taxa = sapply(parsed_names_data, function(x) x[[3]]),
sequence = unname(unlist(ex_data)),
notes = sapply(parsed_names_data, function(x) x[[4]])
)
head(example_barcode_data_from_scratch)
libary(coi5p)
library(coi5p)
load('data/example_barcode_data.RData' )
trans_df = load('data/trans_df.RData')
load('R/sysdata.rda')
trans_df
head(trans_df)
trans_df$trans_table[trans_df$taxon == 'Pyuridae']
trans_df$trans_table[trans_df$taxon == 'Pyuridae'] = 13
trans_df$trans_table[trans_df$taxon == 'Pyuridae']
trans_df$taxon ==	'Stolidobranchia'
trans_df$trans_table[trans_df$taxon ==	'Stolidobranchia']
trans_df$trans_table
trans_df$trans_table[trans_df$taxon ==	'Stolidobranchia'] = 0
trans_df$trans_table == 0
trans_df$trans_table[trans_df$trans_table == 0]
trans_df$trans_table[trans_df$taxon ==	'	Ascidiacea']
trans_df$trans_table[trans_df$taxon ==	'Ascidiacea']
trans_df$trans_table[trans_df$taxon ==	'Ascidiacea']
trans_df$taxon ==	'Ascidiacea'
trans_df$trans_table[trans_df$taxon ==	'Ascidiacea']
###############################################################################
#' Data frame containing the translation table recommendation.
#'
"trans_df"
head(trans_df)
trans_df$level == "class"
trans_df$level[trans_df$level == "class"]
View(trans_df)
head(trans_df)
# should this be in it?:
# trans_df$trans_table[trans_df$taxon ==	'Ascidiacea'] = 0
asc = data.frame(trans_table = 0, taxon = "Ascidiacea", level = "class")
trans_df = rbind(trans_df, asc)
trans_df$trans_table[trans_df$taxon ==	'Ascidiacea']
use_data(nt_PHMM , aa_PHMM, trans_df, example_nt_string, overwrite = TRUE, internal = TRUE)
library(devtools)
use_data(nt_PHMM , aa_PHMM, trans_df, example_nt_string, overwrite = TRUE, internal = TRUE)
x = "ACMasas"
tolower(x)
trans_df$trans_table = tolower(trans_df$trans_table)
trans_df
trans_df$trans_table = unlist(lapply( trans_df$trans_table, tolower))
trans_df
trans_df$taxon = unlist(lapply( trans_df$taxon, tolower))
trans_df
trans_df$trans_table[1]
trans_df$trans_table = as.integer(trans_df$trans_table)
trans_df$trans_table[1]
use_data(nt_PHMM , aa_PHMM, trans_df, example_nt_string, overwrite = TRUE, internal = TRUE)
devtools::document()
